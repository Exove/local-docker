# Use images from Docker Hub to use community/or-alike maintained images.
# @see https://hub.docker.com/explore/
#
# # Fix images to minor release tags to make all container updates deliberate,
# # while still allowing patch releases.

version: '3.2'

services:

  nginx:
    build: ./docker/build/nginx
    ports:
      - "${LOCAL_IP:-127.0.0.1}:${CONTAINER_PORT_NGINX_HTTP:-80}:80"
      - "${LOCAL_IP:-127.0.0.1}:${CONTAINER_PORT_NGINX_HTTPS:-443}:443"
    volumes:
      # :nocopy must be used with docker-sync
      # See bottom of this file, and ./docker-sync.yml
      - webroot-sync-core:/var/www:nocopy
    env_file:
      - .env
    depends_on: # This key affects the order of which containers get started.
      - php
    working_dir: /var/www/web

  php:
    # Available builds: https://hub.docker.com/r/xoxoxo/php-container/tags
    # Custom build contains sendmail_path -fix for Mailhog and OPTION to add
    # overrides (per project) to other PHP config.
    build: ./docker/build/php/${PROJECT_PHP_VERSION}
    volumes:
      # :nocopy must be used with docker-sync
      # See bottom of this file, and ./docker-sync.yml
      - webroot-sync-core:/var/www:nocopy
    env_file:
      - .env
    working_dir: /var/www

  composer:
    # Run `composer install` during startup.
    build: ./docker/build/php/${PROJECT_PHP_VERSION}
    volumes:
      # This share gets writes from within the container by Composer.
      # :nocopy must be used with docker-sync
      # See bottom of this file, and ./docker-sync.yml
      - webroot-sync-core-delegated:/var/www:nocopy
    env_file:
      - .env
    working_dir: /var/www
    command: sh -c '[[ ! -e "/var/www/composer.lock" ]] && exit 0 || /usr/local/bin/composer install'

  db:
    # mysql:8.0.11 keeps restarting.
    image: mysql:5.7.26
    ports:
      - "${LOCAL_IP:-127.0.0.1}:${CONTAINER_PORT_DB:-3306}:3306"
    volumes:
      # This folder contains database dumps (mostly written by container).
      # :nocopy must be used with docker-sync
      # See bottom of this file, and ./docker-sync.yml
      - webroot-sync-db-dumps:/var/db_dumps:nocopy
      # Named volume for db table data. Docker keeps this volume around
      # unless stack is down'ed with "--volumes":
      # $ docker-compose down --volumes
      - db_data:/var/lib/mysql
    # In case of several env files later declared variable
    # values override earlier ones
    env_file:
      - .env
    working_dir: /var
    restart: always
    # Set max_allowed_packet to 256M (or any other value)
    command: --max_allowed_packet=268435456

  # Maybe use this instead of the one set blow here: https://hub.docker.com/r/eeacms/varnish/
  # varnish:
  #   image: jonbaldie/varnish:8056b94
  #   ports:
  #     - "${LOCAL_IP:-127.0.0.1}:${CONTAINER_PORT_VARNISH:-8017}:80"

  adminer:
    image: adminer
    restart: always
    ports:
      - "${LOCAL_IP:-127.0.0.1}:${CONTAINER_PORT_ADMINER:-8080}:8080"

  # PHP container needs some Mailhog -configuration.
  mailhog:
    image: mailhog/mailhog:v1.0.0
    restart: always
    ports:
      - "${LOCAL_IP:-127.0.0.1}:${CONTAINER_PORT_MAILHOG:-8025}:8025"

  # Replace MYTHEME with your theme name. If you have multiple the
  # clone the noodejs -section and rename the containers to something like
  # - nodejs_mytheme and
  # - nodejs_my_other_theme.
  nodejs:
    image: wodby/drupal-node:1.0-1.0.0
    working_dir: /var/www
    volumes:
      - webroot-sync-core-delegated:/var/www:nocopy
    command: sh -c '[[ ! -e "/var/www/web/themes/custom/MYTHEME/gulpfile.js" ]] && exit 0 || npm install --global gulp-cli && npm install && npm install bootstrap-sass && gulp watch'

volumes:
  webroot-sync-core:
    external: true
  webroot-sync-core-delegated:
    external: true
  webroot-sync-db-dumps:
    external: true
  db_data: {}

