# Template: docker-compose.nodejs.yml
#
# This file sets up containers using docker-sync (intermediate sync containers)
# for page load performance, but causes start up time delay up to a few minutes.

version: '3.3'

services:

  # @see https://github.com/containous/blog-posts/blob/master/2019_09_10-101_docker/docker-compose-09.yml
  traefik:
    image: "traefik:v2.0.0"
    container_name: "${PROJECT_NAME}_traefik"
    ports:
      - "${LOCAL_IP:-127.0.0.1}:${CONTAINER_PORT_WEB:-80}:80"
      - "${LOCAL_IP:-127.0.0.1}:${CONTAINER_PORT_WEB_SSL:-443}:443"
    labels:
      - "traefik.enable=true"
      # DASHBOARD
      # Comment out routers with entrypoint "web" to add http -> https redirect.
      - "traefik.http.routers.${PROJECT_NAME}--traefik-plain.rule=Host(`traefik.${LOCAL_DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}--traefik-plain.entrypoints=web"
      - "traefik.http.routers.${PROJECT_NAME}--traefik-plain.service=api@internal"

      - "traefik.http.routers.${PROJECT_NAME}--traefik-https.rule=Host(`traefik.${LOCAL_DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}--traefik-https.entrypoints=websecure"
      - "traefik.http.routers.${PROJECT_NAME}--traefik-https.service=api@internal"
      - "traefik.http.routers.${PROJECT_NAME}--traefik-https.tls=true"

      #  !!!! redirection HTTP to HTTPS - BEGIN !!!!
      # This catches http request ONLY if there is no router which has a matching
      # host -rule and attached to entrypoint "web".
      - "traefik.http.routers.${PROJECT_NAME}--http_catchall.rule=HostRegexp(`{any:.*}`)"
      - "traefik.http.routers.${PROJECT_NAME}--http_catchall.entrypoints=web"
      - "traefik.http.routers.${PROJECT_NAME}--http_catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      #  !!!! redirection HTTP to HTTPS - END !!!!

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/certs:/certs:delegated
      - ./docker/certs/certs.yml:/etc/traefik/certs.yml:delegated
    # In case of several env files later declared variable
    # values override earlier ones
    env_file:
      - .env
      - .env.local
    restart: on-failure
    command:
      # NOTE: entrypoints.XX.address MUST NOT contain IP, but only port.
      - "--entrypoints.web.address=:${CONTAINER_PORT_WEB:-80}"
      - "--entryPoints.web.forwardedHeaders.insecure"
      - "--entrypoints.websecure.address=:${CONTAINER_PORT_WEB_SSL:-443}"
      - "--entryPoints.websecure.forwardedHeaders.insecure"
      - --providers.docker
      - --ping
      - --api
      - --api.dashboard
      - --providers.file.filename=/etc/traefik/certs.yml
      #- --log.level=DEBUG

  whoami:
    image: containous/whoami:v1.3.0
    container_name: "${PROJECT_NAME}_whoami"
    labels:
      # Comment out routers with entrypoint "web" to add http -> https redirect.
      - "traefik.http.routers.${PROJECT_NAME}--whoami-plain.rule=Host(`whoami.${LOCAL_DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}--whoami-plain.entrypoints=web"

      - "traefik.http.routers.${PROJECT_NAME}--whoami-https.rule=Host(`whoami.${LOCAL_DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}--whoami-https.entrypoints=websecure"
      # This tells Traefik to terminate the SSL connection,
      # @see https://docs.traefik.io/routing/routers/#tls
      - "traefik.http.routers.${PROJECT_NAME}--whoami-https.tls=true"

    restart: on-failure

  nginx:
    build:
      context: "./docker/build/nginx"
      dockerfile: Dockerfile
    container_name: "${PROJECT_NAME}_nginx"
    labels:
      # Comment out routers with entrypoint "web" to add http -> https redirect.
      - "traefik.http.routers.${PROJECT_NAME}--www-plain.rule=Host(`${LOCAL_DOMAIN}`, `www.${LOCAL_DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}--www-plain.entrypoints=web"

      - "traefik.http.routers.${PROJECT_NAME}--www-https.rule=Host(`${LOCAL_DOMAIN}`, `www.${LOCAL_DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}--www-https.entrypoints=websecure"
      # This tells Traefik to terminate the SSL connection,
      # @see https://docs.traefik.io/routing/routers/#tls
      - "traefik.http.routers.${PROJECT_NAME}--www-https.tls=true"

    volumes:
      # :nocopy must be used with docker-sync
      # See bottom of this file, and ./docker-sync.yml
      - webroot-sync-core:/var/www:nocopy
    # In case of several env files later declared variable
    # values override earlier ones
    env_file:
      - .env
      - .env.local
    depends_on: # This key affects the order of which containers get started.
      - nodejs
    restart: on-failure
    working_dir: /var/www/web

  db:
    # mysql:8.0.11 keeps restarting.
    image: mysql:5.7.26
    container_name: "${PROJECT_NAME}_db"
    ports:
      - "${LOCAL_IP:-127.0.0.1}:${CONTAINER_PORT_DB:-3306}:3306"
    volumes:
      # This folder contains database dumps (mostly written by container).
      # :nocopy must be used with docker-sync
      # See bottom of this file, and ./docker-sync.yml
      - ./db_dumps:/var/db_dumps:cached
      # Named volume for db table data. Docker keeps this volume around
      # unless stack is down'ed with "--volumes":
      # $ docker-compose down --volumes
      - db_data:/var/lib/mysql
    # In case of several env files later declared variable
    # values override earlier ones
    env_file:
      - .env
      - .env.local
    restart: on-failure
    working_dir: /var
    # Set max_allowed_packet to 256M (or any other value)
    command: --max_allowed_packet=268435456

  # Maybe use this instead of the one set blow here: https://hub.docker.com/r/eeacms/varnish/
  # varnish:
  #   image: jonbaldie/varnish:8056b94
  #   ports:
  #     - "${LOCAL_IP:-127.0.0.1}:${CONTAINER_PORT_VARNISH:-8017}:80"


  adminer:
    image: adminer:4.7.3
    container_name: "${PROJECT_NAME}_adminer"
    labels:
      # Comment out routers with entrypoint "web" to add http -> https redirect.
      - "traefik.http.routers.${PROJECT_NAME}--adminer-plain.rule=Host(`adminer.${LOCAL_DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}--adminer-plain.entrypoints=web"

      - "traefik.http.routers.${PROJECT_NAME}--adminer-https.rule=Host(`adminer.${LOCAL_DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}--adminer-https.entrypoints=websecure"
      # This tells Traefik to terminate the SSL connection,
      # @see https://docs.traefik.io/routing/routers/#tls
      - "traefik.http.routers.${PROJECT_NAME}--adminer-https.tls=true"

    restart: on-failure

  # PHP container needs some Mailhog -configuration.
  mailhog:
    image: mailhog/mailhog:v1.0.0
    container_name: "${PROJECT_NAME}_mailhog"
    labels:
      # Comment out routers with entrypoint "web" to add http -> https redirect.
      - "traefik.http.routers.${PROJECT_NAME}--mailhog-plain.rule=Host(`mailhog.${LOCAL_DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}--mailhog-plain.entrypoints=web"

      - "traefik.http.routers.${PROJECT_NAME}--mailhog-https.rule=Host(`mailhog.${LOCAL_DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}--mailhog-https.entrypoints=websecure"
      # This tells Traefik to terminate the SSL connection,
      # @see https://docs.traefik.io/routing/routers/#tls
      - "traefik.http.routers.${PROJECT_NAME}--mailhog-https.tls=true"
      # https://docs.traefik.io/routing/providers/docker/#service-definition
      - "traefik.http.services.${PROJECT_NAME}--mailhog.loadbalancer.server.port=8025"

    restart: on-failure

  nodejs:
    image: node:12
    container_name: "${PROJECT_NAME}_nodejs"
    volumes:
      - webroot-sync-core:/var/www:nocopy
      - ./${APP_ROOT}:/var/www/web:delegated
    # In case of several env files later declared variable
    # values override earlier ones
    env_file:
      - .env
      - .env.local
    restart: on-failure
    working_dir: /var/www/web
    command: sh -c 'npm install -g typescript && npm install && npm start'

volumes:
  webroot-sync-core:
    external: true
  db_data: {}
